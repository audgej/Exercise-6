9.1
class Resturant:
    """A simple attempt to model a resturant."""

    def __init__(self,resturant_name,cuisine_type):
        self.resturant_name = resturant_name
        self.cuisine_type = cuisine_type

    def describe_resturant(self):
        """Describe the resturant."""
        print(f"{self.resturant_name} is a great place that serves {self.cuisine_type}!")

    def open_resturant(self):
        """open the resturant."""
        print(f"{self.resturant_name} is now OPEN!")

resturant = Resturant("Bobs Pizza", 'Italian Pizza')

resturant.open_resturant()
resturant.describe_resturant

9.2
class Resturant:
    """A simple attempt to model a resturant."""

    def __init__(self,resturant_name,cuisine_type):
        self.resturant_name = resturant_name
        self.cuisine_type = cuisine_type

    def describe_resturant(self):
        """Describe the resturant."""
        print(f"{self.resturant_name} is a great place that serves {self.cuisine_type}!")

    def open_resturant(self):
        """open the resturant."""
        print(f"{self.resturant_name} is now OPEN!")

zach_resturant = Resturant("Bob's Pizza", 'Italian Pizza')
matt_resturant = Resturant("Something Random", 'Seafood')
ryan_resturant = Resturant("IDK", 'Sandwiches')

zach_resturant.open_resturant()
zach_resturant.describe_resturant()

matt_resturant.open_resturant()
matt_resturant.describe_resturant()

ryan_resturant.open_resturant()
ryan_resturant.describe_resturant()

9.3
class User:
    """Attempt a simple user profile."""

    def __init__(self, first_name, last_name, username, email):
        """Initialize the user."""
        self.first_name = first_name.title()
        self.last_name = last_name.title()
        self.username = username
        self.email = email

    def describe_user(self):
        """Print a summary of the user's information."""
        print(f"\n{self.first_name} {self.last_name}")
        print(f"  Username: {self.username}")
        print(f"  Email: {self.email}")

    def greet_user(self):
        """Print a personalized greeting to the user."""
        print(f"\nWelcome back, {self.username}!")

audrey = User('audrey', 'johnson', 'ajohnson', 'ajohnson@email.com',)
audrey.describe_user()
audrey.greet_user()

sam = User('sam', 'thorsland', 'sthorsland', 'sthorsland@email.com',)
sam.describe_user()
sam.greet_user()

lindsay = User('lindsay', 'duncan', 'ldunk', 'ldunk@email.com',)
lindsay.describe_user()
lindsay.greet_user()


9.4:
class Restaurant:
    """A simple attempt to model a resturant."""

    def __init__(self, restaurant_name, cuisine_type):
        self.restaurant_name = restaurant_name
        self.cuisine_type = cuisine_type
        self.numbers_served = 0

    def describe_restaurant(self):
        """Describe the restaurant."""
        print(f"{self.restaurant_name} is a great place that serves {self.cuisine_type}!")

    def open_restaurant(self):
        """open the restaurant."""
        print(f"{self.restaurant_name} is now OPEN!")

    def set_number_served(self, number_served):
        """set the number of customers that have been served."""
        self.number_served = number_served

    def increment_number_served(self, additional_served):
        """increment the number of customers served."""
        self.number_served += additional_served


restaurant = Restaurant('Bobs Pizza', 'Italian pizza')
restaurant.describe_restaurant()

restaurant.number_served = 353
print(f"Number served: {restaurant.number_served}")

restaurant.set_number_served(789)
print(f"Number served: {restaurant.number_served}")

restaurant.increment_number_served(156)
print(f"Number served: {restaurant.number_served}")

9.5:
class User():
    """Attempt a simple user profile."""

    def __init__(self, first_name, last_name, username, email):
        """Initialize the user."""
        self.first_name = first_name.title()
        self.last_name = last_name.title()
        self.username = username
        self.email = email
        self.login_attempts = 0

    def describe_user(self):
        """Print a summary of the user's information."""
        print(f"\n{self.first_name} {self.last_name}")
        print(f"  Username: {self.username}")
        print(f"  Email: {self.email}")

    def greet_user(self):
        """Print a personalized greeting to the user."""
        print(f"\nWelcome back, {self.username}!")

    def increment_login_attempts(self):
        """Increment the value of login_attempts."""
        self.login_attempts += 1

    def reset_login_attempts(self):
        """Reset login_attempts to 0."""
        self.login_attempts = 0

audrey = User('audrey', 'johnson', 'ajohnson', 'ajohnson@email.com',)
audrey.describe_user()
audrey.greet_user()

print("\n3 log-in attempts...")
audrey.increment_login_attempts()
audrey.increment_login_attempts()
audrey.increment_login_attempts()
print(f"Log-in attempts: {audrey.login_attempts}")

print("Resetting log-in attempts...")
audrey.reset_login_attempts()
print(f"Log-in attempts: {audrey.login_attempts}")

9.6:
class Restaurant:
    """A simple attempt to model a resturant."""

    def __init__(self, restaurant_name, cuisine_type):
        self.restaurant_name = restaurant_name
        self.cuisine_type = cuisine_type
        self.number_served = 0

    def describe_restaurant(self):
        """Describe the restaurant."""
        msg = f"{self.restaurant_name} is a great place that serves {self.cuisine_type}!"
        print(f"\n{msg}")

    def open_restaurant(self):
        """open the restaurant."""
        msg = f"{self.restaurant_name} is now OPEN!"
        print(f"\n{msg}")

    def set_number_served(self, number_served):
        """set the number of customers that have been served."""
        self.number_served = number_served

    def increment_number_served(self, additional_served):
        """increment the number of customers served."""
        self.number_served += additional_served

class IceCreamStand(Restaurant):
    """An ice cream stand."""

    def __init__(self, name, cuisine_type='ice_cream'):
        """Initialize the ice cream stand."""
        super().__init__(name, cuisine_type)
        self.flavors = []

    def show_flavors(self):
        """Display the flavors available."""
        print("\nFlavors:")
        for flavor in self.flavors:
            print(f"- {flavor.title()}")

ice_cream = IceCreamStand('Bobs Ice Cream')
ice_cream.flavors = ['vanilla', 'chocolate', 'strawberry']

ice_cream.describe_restaurant()
ice_cream.show_flavors()

9.7:
class User():
    """Attempt a simple user profile."""

    def __init__(self, first_name, last_name, username, email):
        """Initialize the user."""
        self.first_name = first_name.title()
        self.last_name = last_name.title()
        self.username = username
        self.email = email
        self.login_attempts = 0

    def describe_user(self):
        """Print a summary of the user's information."""
        print(f"\n{self.first_name} {self.last_name}")
        print(f"  Username: {self.username}")
        print(f"  Email: {self.email}")

    def greet_user(self):
        """Print a personalized greeting to the user."""
        print(f"\nWelcome back, {self.username}!")

    def increment_login_attempts(self):
        """Increment the value of login_attempts."""
        self.login_attempts += 1

    def reset_login_attempts(self):
        """Reset login_attempts to 0."""
        self.login_attempts = 0

class Admin(User):
    """administrative privileges."""

    def __init__(self, first_name, last_name, username, email):
        """Initialize the admin."""
        super().__init__(first_name, last_name, username, email)
        self.privileges = []

    def show_privileges(self):
        """privileges this administrator has."""
        print("\nPrivileges:")
        for privilege in self.privileges:
            print(f"- {privilege}")


audrey = Admin('audrey', 'johnson', 'audreyj', 'ajohnson@email.com')
audrey.describe_user()

audrey.privileges = [
    'can reset passwords',
    'can moderate discussions',
    'can suspend accounts',
    ]

audrey.show_privileges()

9.8
class User():
    """ user profile."""

    def __init__(self, first_name, last_name, username, email):
        """Initialize the user."""
        self.first_name = first_name.title()
        self.last_name = last_name.title()
        self.username = username
        self.email = email
        self.login_attempts = 0

    def describe_user(self):
        """Display user's information."""
        print(f"\n{self.first_name} {self.last_name}")
        print(f"  Username: {self.username}")
        print(f"  Email: {self.email}")

    def greet_user(self):
        """Display personalized greeting."""
        print(f"\nWelcome back, {self.username}!")

    def increment_login_attempts(self):
        """Increment the value of login_attempts."""
        self.login_attempts += 1

    def reset_login_attempts(self):
        """Reset login_attempts to 0."""
        self.login_attempts = 0


class Admin(User):
    """A user with admin privileges."""

    def __init__(self, first_name, last_name, username, email):
        """Initialize the admin."""
        super().__init__(first_name, last_name, username, email)

        # Initialize an empty set of privileges.
        self.privileges = Privileges()


class Privileges():
    """A class for admin's privileges."""

    def __init__(self, privileges=[]):
        self.privileges = privileges

    def show_privileges(self):
        print("\nPrivileges:")
        if self.privileges:
            for privilege in self.privileges:
                print(f"- {privilege}")
        else:
            print("- This user has no privileges.")


audrey = Admin('audrey', 'johnson', 'ajohnson', 'ajohnson@email.com')
audrey.describe_user()

audrey.privileges.show_privileges()

print("\nAdding privileges...")
audrey_privileges = [
    'can reset passwords',
    'can moderate discussions',
    'can suspend accounts',
]
audrey.privileges.privileges = audrey_privileges
audrey.privileges.show_privileges()


9.9
class Car():
    """represent a car."""

    def __init__(self, manufacturer, model, year):
        """Initialize attributes to describe a car."""
        self.manufacturer = manufacturer
        self.model = model
        self.year = year
        self.odometer_reading = 0

    def get_descriptive_name(self):
        """Return a descriptive name."""
        long_name = f"{self.year} {self.manufacturer} {self.model}"
        return long_name.title()

    def read_odometer(self):
        """Print the car's mileage."""
        print(f"This car has {self.odometer_reading} miles on it.")

    def update_odometer(self, mileage):
        """
        Set the odometer reading to the given value.
        Reject the change if it attempts to roll the odometer back.
        """
        if mileage >= self.odometer_reading:
            self.odometer_reading = mileage
        else:
            print("Odometer's cannot go backwards!")

    def increment_odometer(self, miles):
        """Add the given amount to the odometer reading."""
        self.odometer_reading += miles


class Battery():
    """A battery for an electric car."""

    def __init__(self, battery_size=75):
        """Initialize"""
        self.battery_size = battery_size

    def describe_battery(self):
        """Print the battery size."""
        print(f"This car has a {self.battery_size}-kWh battery.")

    def get_range(self):
        """Print a statement about the range this battery provides."""
        if self.battery_size == 75:
            range = 260
        elif self.battery_size == 100:
            range = 315

        message = f"This car can go about {range}"
        message += " miles on a full charge."
        print(message)

    def upgrade_battery(self):
        """Upgrade the battery if possible."""
        if self.battery_size == 75:
            self.battery_size = 100
            print("Upgraded the battery to 100 kWh.")
        else:
            print("The battery is already upgraded.")


class ElectricCar(Car):
    """Electric car."""

    def __init__(self, manufacturer, model, year):
        """
        Initialize normal car.
        initialize electric car.
        """
        super().__init__(manufacturer, model, year)
        self.battery = Battery()


print("Electric car range:")
my_tesla = ElectricCar('tesla', 'Model 3', 2021)
my_tesla.battery.get_range()

print("\nUpgraded, the range is:")
my_tesla.battery.upgrade_battery()
my_tesla.battery.get_range()

9.10
Restaurant.py
class Restaurant:
    """A simple attempt to model a resturant."""

    def __init__(self, restaurant_name, cuisine_type):
        self.restaurant_name = restaurant_name
        self.cuisine_type = cuisine_type
        self.numbers_served = 0

    def describe_restaurant(self):
        """Describe the restaurant."""
        print(f"{self.restaurant_name} is a great place that serves {self.cuisine_type}!")

    def open_restaurant(self):
        """open the restaurant."""
        print(f"{self.restaurant_name} is now OPEN!")

    def set_number_served(self, number_served):
        """set the number of customers that have been served."""
        self.number_served = number_served

    def increment_number_served(self, additional_served):
        """increment the number of customers served."""
        self.number_served += additional_served

restaurant = Restaurant('Bobs Pizza', 'Italian pizza')
restaurant.describe_restaurant()

NEW.py
from restaurant import Restaurant

channel_club = Restaurant('Sammys Sandwiches', 'sandwiches')
channel_club.describe_restaurant()
channel_club.open_restaurant()


9.13
from random import randint

class Die:
    """Simulate a dice roll."""

    def __init__(self, sides):
        self.sides = 6

answer = randint(1,6)
print (answer)

####10 sides
from random import randint

class Die:
    """Simulate a dice roll."""

    def __init__(self, sides=10):
        self.sides = sides

answer = randint(1,10)
print(answer)

#####20 sides
from random import randint

class Die:
    """Simulate a dice roll."""

    def __init__(self, sides=20):
        self.sides = sides

answer = randint(1,20)
print(answer)


9.14
from random import randint

sc_lottery = ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e')


winning_number = sc_lottery[randint(0,14)]+(sc_lottery[randint(0,14)]+(sc_lottery[randint(0,14)])+(sc_lottery[randint(0,14)])

print(winning_number)
